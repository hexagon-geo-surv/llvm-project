; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=sparcv9 | FileCheck %s -check-prefix=V9
; RUN: llc < %s -mtriple=sparcv9 -mattr=vis3 | FileCheck %s -check-prefix=VIS3

define i32 @stow(float %0) nounwind {
; V9-LABEL: stow:
; V9:       ! %bb.0:
; V9-NEXT:    add %sp, -144, %sp
; V9-NEXT:    st %f1, [%sp+2187]
; V9-NEXT:    ld [%sp+2187], %o0
; V9-NEXT:    retl
; V9-NEXT:    add %sp, 144, %sp
;
; VIS3-LABEL: stow:
; VIS3:       ! %bb.0:
; VIS3-NEXT:    retl
; VIS3-NEXT:    movstouw %f1, %o0
  %2 = bitcast float %0 to i32
  ret i32 %2
}

define zeroext i32 @stouw(float %0) nounwind {
; V9-LABEL: stouw:
; V9:       ! %bb.0:
; V9-NEXT:    add %sp, -144, %sp
; V9-NEXT:    st %f1, [%sp+2187]
; V9-NEXT:    ld [%sp+2187], %o0
; V9-NEXT:    retl
; V9-NEXT:    add %sp, 144, %sp
;
; VIS3-LABEL: stouw:
; VIS3:       ! %bb.0:
; VIS3-NEXT:    retl
; VIS3-NEXT:    movstouw %f1, %o0
  %2 = bitcast float %0 to i32
  ret i32 %2
}

define signext i32 @stosw(float %0) nounwind {
; V9-LABEL: stosw:
; V9:       ! %bb.0:
; V9-NEXT:    add %sp, -144, %sp
; V9-NEXT:    st %f1, [%sp+2187]
; V9-NEXT:    ldsw [%sp+2187], %o0
; V9-NEXT:    retl
; V9-NEXT:    add %sp, 144, %sp
;
; VIS3-LABEL: stosw:
; VIS3:       ! %bb.0:
; VIS3-NEXT:    retl
; VIS3-NEXT:    movstosw %f1, %o0
  %2 = bitcast float %0 to i32
  ret i32 %2
}

define float @wtos(i32 %0) nounwind {
; V9-LABEL: wtos:
; V9:       ! %bb.0:
; V9-NEXT:    add %sp, -144, %sp
; V9-NEXT:    st %o0, [%sp+2187]
; V9-NEXT:    ld [%sp+2187], %f0
; V9-NEXT:    retl
; V9-NEXT:    add %sp, 144, %sp
;
; VIS3-LABEL: wtos:
; VIS3:       ! %bb.0:
; VIS3-NEXT:    retl
; VIS3-NEXT:    movwtos %o0, %f0
  %2 = bitcast i32 %0 to float
  ret float %2
}

define float @uwtos(i32 zeroext %0) nounwind {
; V9-LABEL: uwtos:
; V9:       ! %bb.0:
; V9-NEXT:    add %sp, -144, %sp
; V9-NEXT:    st %o0, [%sp+2187]
; V9-NEXT:    ld [%sp+2187], %f0
; V9-NEXT:    retl
; V9-NEXT:    add %sp, 144, %sp
;
; VIS3-LABEL: uwtos:
; VIS3:       ! %bb.0:
; VIS3-NEXT:    retl
; VIS3-NEXT:    movwtos %o0, %f0
  %2 = bitcast i32 %0 to float
  ret float %2
}

define float @swtos(i32 signext %0) nounwind {
; V9-LABEL: swtos:
; V9:       ! %bb.0:
; V9-NEXT:    add %sp, -144, %sp
; V9-NEXT:    st %o0, [%sp+2187]
; V9-NEXT:    ld [%sp+2187], %f0
; V9-NEXT:    retl
; V9-NEXT:    add %sp, 144, %sp
;
; VIS3-LABEL: swtos:
; VIS3:       ! %bb.0:
; VIS3-NEXT:    retl
; VIS3-NEXT:    movwtos %o0, %f0
  %2 = bitcast i32 %0 to float
  ret float %2
}

define i64 @dtox(double %0) nounwind {
; V9-LABEL: dtox:
; V9:       ! %bb.0:
; V9-NEXT:    add %sp, -144, %sp
; V9-NEXT:    std %f0, [%sp+2183]
; V9-NEXT:    ldx [%sp+2183], %o0
; V9-NEXT:    retl
; V9-NEXT:    add %sp, 144, %sp
;
; VIS3-LABEL: dtox:
; VIS3:       ! %bb.0:
; VIS3-NEXT:    retl
; VIS3-NEXT:    movdtox %f0, %o0
  %2 = bitcast double %0 to i64
  ret i64 %2
}

define double @xtod(i64 %0) nounwind {
; V9-LABEL: xtod:
; V9:       ! %bb.0:
; V9-NEXT:    add %sp, -144, %sp
; V9-NEXT:    stx %o0, [%sp+2183]
; V9-NEXT:    ldd [%sp+2183], %f0
; V9-NEXT:    retl
; V9-NEXT:    add %sp, 144, %sp
;
; VIS3-LABEL: xtod:
; VIS3:       ! %bb.0:
; VIS3-NEXT:    retl
; VIS3-NEXT:    movxtod %o0, %f0
  %2 = bitcast i64 %0 to double
  ret double %2
}
